
Exercícios Resolvidos de Estruturas de Dados

Material 3 - Bubble Sort (3ª Versão)
------------------------------------
Desenvolva a 3ª Versão do algoritmo Bubble Sort para ordenar os dados de forma decrescente:


#include <iostream>
using namespace std;

void bubbleSortDecrescente(int vetor[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (vetor[j] < vetor[j+1]) {
                int temp = vetor[j];
                vetor[j] = vetor[j+1];
                vetor[j+1] = temp;
            }
        }
    }
}
```

Material 4 - Ordenação e Frequência
-----------------------------------
Faça um programa que cadastre 10 números, ordene-os e encontre o menor e o maior número e suas frequências:

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int vetor[10], menor, maior, countMenor = 0, countMaior = 0;

    for (int i = 0; i < 10; i++) {
        cout << "Digite o número " << i+1 << ": ";
        cin >> vetor[i];
    }

    sort(vetor, vetor + 10);
    menor = vetor[0];
    maior = vetor[9];

    for (int i = 0; i < 10; i++) {
        if (vetor[i] == menor) countMenor++;
        if (vetor[i] == maior) countMaior++;
    }

    cout << "Menor número: " << menor << " (aparece " << countMenor << " vezes)
";
    cout << "Maior número: " << maior << " (aparece " << countMaior << " vezes)
";
    return 0;
}
```

Material 5 - Pilhas Estáticas e Dinâmicas
-----------------------------------------
1. Programa com operações de pilha:


#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> pilha;
    int opcao, valor;

    do {
        cout << "\n1 - Inserir\n2 - Remover\n3 - Topo\n4 - Verificar Vazio\n5 - Tamanho\n0 - Sair\nEscolha: ";
        cin >> opcao;
        switch (opcao) {
            case 1: cout << "Digite o valor: "; cin >> valor; pilha.push(valor); break;
            case 2: if (!pilha.empty()) pilha.pop(); else cout << "Pilha vazia\n"; break;
            case 3: if (!pilha.empty()) cout << "Topo: " << pilha.top() << endl; else cout << "Pilha vazia\n"; break;
            case 4: cout << (pilha.empty() ? "Vazia\n" : "Com elementos\n"); break;
            case 5: cout << "Tamanho: " << pilha.size() << endl; break;
        }
    } while (opcao != 0);
}
```

2. Inverter números com pilha:


#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> pilha;
    int numero;

    cout << "Digite números positivos (negativo para parar):\n";
    while (true) {
        cin >> numero;
        if (numero < 0) break;
        pilha.push(numero);
    }

    cout << "Números na ordem inversa:\n";
    while (!pilha.empty()) {
        cout << pilha.top() << " ";
        pilha.pop();
    }
}
```

Material 6 - Fila de Atendimento
--------------------------------

#include <iostream>
#include <queue>
#include <string>
using namespace std;

int main() {
    queue<string> fila;
    int opcao;
    string nome;

    do {
        cout << "\n1 - Inserir cliente\n2 - Atender cliente\n3 - Exibir fila\n0 - Sair\nEscolha: ";
        cin >> opcao;
        cin.ignore();
        switch (opcao) {
            case 1: cout << "Nome do cliente: "; getline(cin, nome); fila.push(nome); break;
            case 2: if (!fila.empty()) { cout << "Atendendo: " << fila.front() << endl; fila.pop(); } else cout << "Fila vazia\n"; break;
            case 3: {
                queue<string> temp = fila;
                cout << "Fila de espera:\n";
                while (!temp.empty()) { cout << temp.front() << endl; temp.pop(); }
            } break;
        }
    } while (opcao != 0);
}
```

Material 7 - Listas com STL
---------------------------

#include <iostream>
#include <list>
#include <algorithm>
using namespace std;

int main() {
    list<int> numeros;
    int valor;

    cout << "Digite 5 números:\n";
    for (int i = 0; i < 5; i++) {
        cin >> valor;
        numeros.push_back(valor);
    }

    cout << "Ordem de inserção:\n";
    for (int num : numeros) cout << num << " ";

    cout << "\nOrdem inversa:\n";
    for (auto it = numeros.rbegin(); it != numeros.rend(); ++it) cout << *it << " ";
}
```

Material 8 - Acesso Sequencial e Aleatório
------------------------------------------

// Exemplo de leitura sequencial: ler e contar linhas de um arquivo
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main() {
    ifstream arquivo("dados.txt");
    string linha;
    int linhas = 0;

    while (getline(arquivo, linha)) {
        linhas++;
    }

    cout << "Total de linhas: " << linhas << endl;
    return 0;
}
```

